/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.flowing.retail.order.domain.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnrichedOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 153929790226573692L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedOrder\",\"namespace\":\"io.flowing.retail.order.domain.avro\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItem\",\"fields\":[{\"name\":\"articleId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int\"}]}}},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"}]}},{\"name\":\"email\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnrichedOrder> ENCODER =
      new BinaryMessageEncoder<EnrichedOrder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnrichedOrder> DECODER =
      new BinaryMessageDecoder<EnrichedOrder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EnrichedOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EnrichedOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EnrichedOrder>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EnrichedOrder to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EnrichedOrder from a ByteBuffer. */
  public static EnrichedOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence orderId;
  @Deprecated public java.util.List<io.flowing.retail.order.domain.avro.OrderItem> items;
  @Deprecated public io.flowing.retail.order.domain.avro.Customer customer;
  @Deprecated public java.lang.CharSequence email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnrichedOrder() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param items The new value for items
   * @param customer The new value for customer
   * @param email The new value for email
   */
  public EnrichedOrder(java.lang.CharSequence orderId, java.util.List<io.flowing.retail.order.domain.avro.OrderItem> items, io.flowing.retail.order.domain.avro.Customer customer, java.lang.CharSequence email) {
    this.orderId = orderId;
    this.items = items;
    this.customer = customer;
    this.email = email;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return items;
    case 2: return customer;
    case 3: return email;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: items = (java.util.List<io.flowing.retail.order.domain.avro.OrderItem>)value$; break;
    case 2: customer = (io.flowing.retail.order.domain.avro.Customer)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<io.flowing.retail.order.domain.avro.OrderItem> getItems() {
    return items;
  }

  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<io.flowing.retail.order.domain.avro.OrderItem> value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public io.flowing.retail.order.domain.avro.Customer getCustomer() {
    return customer;
  }

  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(io.flowing.retail.order.domain.avro.Customer value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Creates a new EnrichedOrder RecordBuilder.
   * @return A new EnrichedOrder RecordBuilder
   */
  public static io.flowing.retail.order.domain.avro.EnrichedOrder.Builder newBuilder() {
    return new io.flowing.retail.order.domain.avro.EnrichedOrder.Builder();
  }

  /**
   * Creates a new EnrichedOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnrichedOrder RecordBuilder
   */
  public static io.flowing.retail.order.domain.avro.EnrichedOrder.Builder newBuilder(io.flowing.retail.order.domain.avro.EnrichedOrder.Builder other) {
    return new io.flowing.retail.order.domain.avro.EnrichedOrder.Builder(other);
  }

  /**
   * Creates a new EnrichedOrder RecordBuilder by copying an existing EnrichedOrder instance.
   * @param other The existing instance to copy.
   * @return A new EnrichedOrder RecordBuilder
   */
  public static io.flowing.retail.order.domain.avro.EnrichedOrder.Builder newBuilder(io.flowing.retail.order.domain.avro.EnrichedOrder other) {
    return new io.flowing.retail.order.domain.avro.EnrichedOrder.Builder(other);
  }

  /**
   * RecordBuilder for EnrichedOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedOrder>
    implements org.apache.avro.data.RecordBuilder<EnrichedOrder> {

    private java.lang.CharSequence orderId;
    private java.util.List<io.flowing.retail.order.domain.avro.OrderItem> items;
    private io.flowing.retail.order.domain.avro.Customer customer;
    private io.flowing.retail.order.domain.avro.Customer.Builder customerBuilder;
    private java.lang.CharSequence email;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.flowing.retail.order.domain.avro.EnrichedOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.items)) {
        this.items = data().deepCopy(fields()[1].schema(), other.items);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      if (other.hasCustomerBuilder()) {
        this.customerBuilder = io.flowing.retail.order.domain.avro.Customer.newBuilder(other.getCustomerBuilder());
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EnrichedOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(io.flowing.retail.order.domain.avro.EnrichedOrder other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.items)) {
        this.items = data().deepCopy(fields()[1].schema(), other.items);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      this.customerBuilder = null;
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<io.flowing.retail.order.domain.avro.OrderItem> getItems() {
      return items;
    }

    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder setItems(java.util.List<io.flowing.retail.order.domain.avro.OrderItem> value) {
      validate(fields()[1], value);
      this.items = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder clearItems() {
      items = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public io.flowing.retail.order.domain.avro.Customer getCustomer() {
      return customer;
    }

    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder setCustomer(io.flowing.retail.order.domain.avro.Customer value) {
      validate(fields()[2], value);
      this.customerBuilder = null;
      this.customer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'customer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.flowing.retail.order.domain.avro.Customer.Builder getCustomerBuilder() {
      if (customerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(io.flowing.retail.order.domain.avro.Customer.newBuilder(customer));
        } else {
          setCustomerBuilder(io.flowing.retail.order.domain.avro.Customer.newBuilder());
        }
      }
      return customerBuilder;
    }

    /**
     * Sets the Builder instance for the 'customer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder setCustomerBuilder(io.flowing.retail.order.domain.avro.Customer.Builder value) {
      clearCustomer();
      customerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customer' field has an active Builder instance
     * @return True if the 'customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return customerBuilder != null;
    }

    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder clearCustomer() {
      customer = null;
      customerBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public io.flowing.retail.order.domain.avro.EnrichedOrder.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnrichedOrder build() {
      try {
        EnrichedOrder record = new EnrichedOrder();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.items = fieldSetFlags()[1] ? this.items : (java.util.List<io.flowing.retail.order.domain.avro.OrderItem>) defaultValue(fields()[1]);
        if (customerBuilder != null) {
          record.customer = this.customerBuilder.build();
        } else {
          record.customer = fieldSetFlags()[2] ? this.customer : (io.flowing.retail.order.domain.avro.Customer) defaultValue(fields()[2]);
        }
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnrichedOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnrichedOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnrichedOrder>
    READER$ = (org.apache.avro.io.DatumReader<EnrichedOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
