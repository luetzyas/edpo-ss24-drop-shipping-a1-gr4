spring.application.name=order-camunda
spring.datasource.url=jdbc:h2:./camunda-db-order;DB_CLOSE_ON_EXIT=false
spring.jpa.hibernate.ddl-auto = create

server.port = 8092

camunda.bpm.admin-user.id=demo
camunda.bpm.admin-user.password=demo
camunda.bpm.filter.create=All
camunda.bpm.license-file=file:${user.home}/.camunda/license.txt
camunda.bpm.generic-properties.properties.historyTimeToLive=P1D

flowing-retail.topic-name=flowing-retail
spring.kafka.bootstrap-servers=kafka:29092
#spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.properties.schema.registry.url=http://schema-registry:8081

# Enriched order consumer properties
enriched-order-service-group.spring.kafka.consumer.group-id=enriched-order-service-group
enriched-order-service-group.spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
enriched-order-service-group.spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
enriched-order-service-group.spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=io.confluent.kafka.serializers.KafkaAvroDeserializer
enriched-order-service-group.spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
enriched-order-service-group.spring.kafka.consumer.properties.specific.avro.reader=true

# Order service consumer properties
order-service-group.spring.kafka.consumer.group-id=order-service-group
order-service-group.spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
order-service-group.spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer